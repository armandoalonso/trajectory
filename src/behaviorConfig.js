// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "behavior",
  id: "piranha305_trajectory",
  name: "Trajectory",
  version: "1.0.0.0",
  category:
    // "attributes",
     "movements",
    // "other",
    // "general",
  author: "piranha305",
  website: "https://www.construct.net",
  documentation: "https://www.construct.net",
  description: "A Trajectory behavior for Construct 3, Simulate 2D physics trajectory and projectile motion. simulates the motion of an object that is thrown, launched, or otherwise projected",
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  // githubUrl: "https://github.com/skymen/XXXX", // displays latest release version in auto-generated docs
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    Set: {
      IsOnlyOneAllowed: false,
      CanBeBundled: true,
      IsDeprecated: false,
    },
  },
  properties: [
    {
      type: "check",
      id: "enabled",
      name: "Enabled",
      desc: "Enabled",
      options: {
        initialValue: true,
        interpolatable: false,
      }
    },
    {
      type: "integer",
      id: "velocity",
      name: "Velocity",
      desc: "Velocity, in pixels per second",
      options: {
        initialValue: 100,
        interpolatable: false,
      }
    },
    {
      type: "integer",
      id: "angle",
      name: "Angle",
      desc: "Angle, in degrees",
      options: {
        initialValue: 45,
        interpolatable: false,
      }
    },
    {
      type: "integer",
      id: "gravity",
      name: "Gravity",
      desc: "Gravity, in pixels per second squared",
      options: {
        initialValue: 1000,
        interpolatable: false,
      }
    },
    {
      type: "integer",
      id: "gravityAngle",
      name: "Gravity Angle",
      desc: "Gravity Angle, in degrees",
      options: {
        initialValue: 270,
        interpolatable: false,
      }
    }
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    setup: "Setup",
    calculate: "Calculate",
  },
  Acts: {
    SetEnabled:{
      category: "setup",
      forward: "SetEnabled",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "enabled",
          name: "Enabled",
          desc: "Enabled",
          type: "boolean",
          value: "true",
        },
      ],
      listName: "Set Enabled",
      displayText: "{my}: Set Enabled [i]{0}[/i]",
      description: "Set Enabled",
    },
    SetGravityAngle: {
      category: "setup",
      forward: "SetGravityAngle",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "gravityAngle",
          name: "Gravity Angle",
          desc: "Gravity Angle, in degrees",
          type: "number",
          value: "270",
        },
      ],
      listName: "Set Gravity Angle",
      displayText: "{my}: Set Gravity Angle [i]{0}[/i]",
      description: "Set Gravity Angle",
    },
    SetTrajectoryByVelocity: {
      category: "calculate",
      forward: "SetTrajectoryByVelocity",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "velocity",
          name: "Velocity",
          desc: "Velocity, in pixels per second",
          type: "number",
          value: "100",
        },
        {
          id: "angle",
          name: "Angle",
          desc: "Angle, in degrees",
          type: "number",
          value: "270",
        },
      ],
      listName: "Set Trajectory By Velocity",
      displayText: "{my}: Set Trajectory By Velocity [i]{0}[/i] [i]{1}[/i]",
      description: "Set Trajectory By Velocity",
    },
    SetTrajectoryByTarget: {
      category: "calculate",
      forward: "SetTrajectoryByTarget",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "targetX",
          name: "Target X",
          desc: "Target X",
          type: "number",
          value: "0",
        },
        {
          id: "targetY",
          name: "Target Y",
          desc: "Target Y",
          type: "number",
          value: "0",
        },
        {
          id: "time",
          name: "Time",
          desc: "Time, in seconds",
          type: "number",
          value: "1",
        },
      ],
      listName: "Set Trajectory By Target",
      displayText: "{my}: Set Trajectory By Target [i]{0}[/i] [i]{1}[/i] [i]{2}[/i]",
      description: "Set Trajectory By Target",
    },
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
  },
  Cnds: {
    IsEnabled: {
      category: "setup",
      forward: "IsEnabled",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      listName: "Is Enabled",
      displayText: "{my}: Is Enabled",
      description: "Is Enabled",
    },
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
  },
  Exps: {
    GetXAt: {
      category: "calculate",
      forward: "GetXAt",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "time",
          name: "Time",
          desc: "Time, in seconds",
          type: "number",
          value: "0",
        },
      ],
      returnType: "number",
      listName: "Get X At",
      displayText: "{my}: Get X At [i]{0}[/i]",
      description: "Get X At",
    },
    GetYAt: {
      category: "calculate",
      forward: "GetYAt",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "time",
          name: "Time",
          desc: "Time, in seconds",
          type: "number",
          value: "0",
        },
      ],
      returnType: "number",
      listName: "Get Y At",
      displayText: "{my}: Get Y At [i]{0}[/i]",
      description: "Get Y At",
    },
    GetVelocityX: {
      category: "calculate",
      forward: "GetVelocityX",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      listName: "Get Velocity X",
      displayText: "{my}: Get Velocity X",
      description: "Get Velocity X",
    },
    GetVelocityY: {
      category: "calculate",
      forward: "GetVelocityY",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      returnType: "number",
      listName: "Get Velocity Y",
      displayText: "{my}: Get Velocity Y",
      description: "Get Velocity Y",
    },
    GetAngleAt: {
      category: "calculate",
      forward: "GetAngleAt",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "time",
          name: "Time",
          desc: "Time, in seconds",
          type: "number",
          value: "0",
        },
      ],
      returnType: "number",
      listName: "Get Angle At",
      displayText: "{my}: Get Angle At [i]{0}[/i]",
      description: "Get Angle At",
    },
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
